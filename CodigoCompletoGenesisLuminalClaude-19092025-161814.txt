================================================================
GENESIS LUMINAL - CÓDIGO COMPLETO
================================================================
Data de Extração: 19/09/2025 às 16:18:14
Diretório Original: /home/moises/workspace/genesis_luminal_claude
Arquivo Gerado: CodigoCompletoGenesisLuminalClaude-19092025-161814.txt
================================================================

===== Arquivo: /home/moises/workspace/genesis_luminal_claude/frontend/package.json =====
{
  "name": "genesis_luminal_claude",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "description": "Genesis Luminal - Frontend React com experiência transcendental",
  "keywords": [
    "digital-consciousness",
    "emotional-ai",
    "morphogenesis",
    "quantum-sync",
    "three.js",
    "tensorflow.js",
    "transcendental-ux"
  ],
  "author": "Genesis Luminal Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:coverage": "vitest run --coverage",
    "test:e2e": "playwright test",
    "lint": "eslint . --ext ts,tsx --max-warnings 0",
    "lint:fix": "eslint . --ext ts,tsx --fix",
    "typecheck": "tsc --noEmit",
    "format": "prettier --write .",
    "format:check": "prettier --check ."
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "three": "^0.157.0",
    "@react-three/fiber": "^8.15.0",
    "@react-three/drei": "^9.88.0",
    "zustand": "^4.5.7",
    "framer-motion": "^10.16.0",
    "@tensorflow/tfjs": "^4.13.0",
    "tone": "^14.7.77"
  },
  "devDependencies": {
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@types/three": "^0.157.0",
    "@typescript-eslint/eslint-plugin": "^6.10.0",
    "@typescript-eslint/parser": "^6.10.0",
    "@vitejs/plugin-react": "^4.1.1",
    "eslint": "^8.53.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "prettier": "^3.0.3",
    "typescript": "^5.2.2",
    "vite": "^4.5.0",
    "vitest": "^0.34.6",
    "@vitest/ui": "^0.34.6",
    "jsdom": "^22.1.0",
    "playwright": "^1.40.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/jest-dom": "^6.1.4"
  }
}

------------------------------------------------------------------------------------------------------------------------

===== Arquivo: /home/moises/workspace/genesis_luminal_claude/frontend/src/App.tsx =====
import { useState } from 'react';
import { GenesisCore } from './components/GenesisCore';
import ErrorBoundary from './components/ErrorBoundary';
import './App.css';

export default function App() {
  const [isInitialized, setIsInitialized] = useState(false);

  return (
    <ErrorBoundary>
      <div className="App">
        <GenesisCore 
          onInitialized={() => setIsInitialized(true)}
          isActive={isInitialized}
        />
      </div>
    </ErrorBoundary>
  );
}

------------------------------------------------------------------------------------------------------------------------

===== Arquivo: /home/moises/workspace/genesis_luminal_claude/frontend/src/main.tsx =====
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './styles.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

------------------------------------------------------------------------------------------------------------------------

===== Arquivo: /home/moises/workspace/genesis_luminal_claude/backend/src/providers/ProviderRouter.ts =====
import { AnthropicProvider } from './AnthropicProvider';
import { FallbackProvider } from './FallbackProvider';
import { logger } from '../utils/logger';
import type { EmotionalAnalysisRequest, EmotionalAnalysisResponse } from '../../../shared/types/api';

export class ProviderRouter {
  private providers: Array<{ name: string; provider: any }>;
  private failureCount: number = 0;
  private maxFailures: number = 3;
  private lastFailureTime: number = 0;
  private circuitBreakerTimeout: number = 60000; // 1 minute

  constructor() {
    this.providers = [
      { name: 'anthropic', provider: new AnthropicProvider() },
      { name: 'fallback', provider: new FallbackProvider() }
    ];
  }

  async analyzeEmotion(input: string): Promise<EmotionalAnalysisResponse> {
    const startTime = Date.now();
    
    // Circuit breaker logic
    if (this.isCircuitBreakerOpen()) {
      logger.warn('Circuit breaker is open, using fallback');
      return await this.useFallback(input, startTime);
    }

    try {
      // Try primary provider (Anthropic)
      const result = await this.providers[0].provider.analyze({ text: input });
      
      // Reset failure count on success
      this.failureCount = 0;
      
      return {
        ...result,
        processingTime: Date.now() - startTime,
        provider: this.providers[0].name
      };
    } catch (error) {
      logger.error('Primary provider failed', { error, input });
      
      // Increment failure count
      this.failureCount++;
      this.lastFailureTime = Date.now();
      
      // Use fallback
      return await this.useFallback(input, startTime);
    }
  }

  private async useFallback(input: string, startTime: number): Promise<EmotionalAnalysisResponse> {
    try {
      const result = await this.providers[1].provider.analyze({ text: input });
      return {
        ...result,
        processingTime: Date.now() - startTime,
        provider: this.providers[1].name
      };
    } catch (error) {
      logger.error('Fallback provider also failed', { error });
      throw new Error('All providers failed');
    }
  }

  private isCircuitBreakerOpen(): boolean {
    if (this.failureCount >= this.maxFailures) {
      const timeSinceLastFailure = Date.now() - this.lastFailureTime;
      return timeSinceLastFailure < this.circuitBreakerTimeout;
    }
    return false;
  }

  async isHealthy(): Promise<boolean> {
    try {
      await this.providers[0].provider.analyze({ text: 'health check' });
      return true;
    } catch {
      return false;
    }
  }

  getActiveProviderName(): string {
    return this.isCircuitBreakerOpen() ? this.providers[1].name : this.providers[0].name;
  }
}

------------------------------------------------------------------------------------------------------------------------

===== Arquivo: /home/moises/workspace/genesis_luminal_claude/backend/src/providers/AnthropicProvider.ts =====
import type { EmotionalAnalysisRequest, EmotionalAnalysisResponse } from '../../../shared/types/api';
import { logger } from '../utils/logger';

export class AnthropicProvider {
  private apiKey: string;

  constructor() {
    this.apiKey = process.env.CLAUDE_API_KEY || '';
  }

  async analyze(request: EmotionalAnalysisRequest): Promise<EmotionalAnalysisResponse> {
    const startTime = Date.now();
    
    try {
      // TODO: Implementar call real para API Anthropic quando disponível
      // Por enquanto, retorna análise mock baseada no texto
      const { text } = request;
      
      if (!text || text.trim().length === 0) {
        throw new Error('Text is required for emotional analysis');
      }

      // Análise emocional básica baseada em palavras-chave
      const intensity = this.calculateIntensity(text);
      const dominantAffect = this.determineDominantAffect(text);
      const confidence = this.calculateConfidence(text);

      const response: EmotionalAnalysisResponse = {
        intensity,
        dominantAffect,
        confidence,
        processingTime: Date.now() - startTime,
        provider: 'anthropic',
        recommendation: this.generateRecommendation(intensity),
        timestamp: new Date().toISOString()
      };

      logger.info('Emotional analysis completed', { 
        textLength: text.length, 
        intensity, 
        dominantAffect,
        processingTime: response.processingTime
      });

      return response;
    } catch (error) {
      logger.error('Anthropic provider error', { error, request });
      throw error;
    }
  }

  private calculateIntensity(text: string): number {
    const length = text.length;
    const exclamationCount = (text.match(/!/g) || []).length;
    const capsCount = (text.match(/[A-Z]/g) || []).length;
    
    let intensity = Math.min(length / 100, 1.0);
    intensity += exclamationCount * 0.1;
    intensity += (capsCount / length) * 0.5;
    
    return Math.min(intensity, 1.0);
  }

  private determineDominantAffect(text: string): string {
    const lowerText = text.toLowerCase();
    
    const joyWords = ['happy', 'joy', 'excited', 'wonderful', 'amazing', 'great', 'love'];
    const sadnessWords = ['sad', 'depressed', 'unhappy', 'terrible', 'awful', 'bad'];
    const angerWords = ['angry', 'furious', 'mad', 'hate', 'annoyed'];
    const fearWords = ['afraid', 'scared', 'worried', 'anxious', 'nervous'];
    
    let joyScore = joyWords.filter(word => lowerText.includes(word)).length;
    let sadnessScore = sadnessWords.filter(word => lowerText.includes(word)).length;
    let angerScore = angerWords.filter(word => lowerText.includes(word)).length;
    let fearScore = fearWords.filter(word => lowerText.includes(word)).length;
    
    const maxScore = Math.max(joyScore, sadnessScore, angerScore, fearScore);
    
    if (maxScore === 0) return 'curiosity';
    if (joyScore === maxScore) return 'joy';
    if (sadnessScore === maxScore) return 'nostalgia';
    if (angerScore === maxScore) return 'power';
    if (fearScore === maxScore) return 'mystery';
    
    return 'serenity';
  }

  private calculateConfidence(text: string): number {
    if (text.length < 10) return 0.3;
    if (text.length < 50) return 0.6;
    return 0.8;
  }

  private generateRecommendation(intensity: number): string {
    if (intensity > 0.8) return 'continue';
    if (intensity > 0.5) return 'adapt';
    return 'pause';
  }

  async isHealthy(): Promise<boolean> {
    return true; // Provider sempre disponível no modo mock
  }

  getProviderName(): string {
    return 'anthropic';
  }
}

------------------------------------------------------------------------------------------------------------------------

===== Arquivo: /home/moises/workspace/genesis_luminal_claude/shared/types/api.ts =====
// === EMOTIONAL DNA ===
export interface Vector2D {
  x: number;
  y: number;
}

export interface EmotionalDNA {
  joy: number;
  nostalgia: number;
  curiosity: number;
  serenity: number;
  ecstasy: number;
  mystery: number;
  power: number;
}

export type EmotionalAffect = keyof EmotionalDNA;

export interface EmotionalAnalysisRequest {
  currentState?: EmotionalDNA;
  mousePosition?: Vector2D;
  sessionDuration?: number;
  userId?: string;
  text?: string;
  metadata?: any;
}

export interface EmotionalAnalysisResponse {
  intensity?: number;
  dominantAffect?: keyof EmotionalDNA;
  timestamp?: string;
  success?: boolean;
  confidence?: number;
  recommendation?: string;
  error?: unknown;
  emotionalShift?: unknown;
  morphogenicSuggestion?: unknown;
  processingTime?: number;
  provider?: string;
}

export interface SystemStatus {
  status: string;
  service: string;
  version: string;
  environment: string;
  timestamp: string;
  uptime_seconds: number;
  memory_mb: {
    rss: number;
    heapUsed: number;
    heapTotal: number;
  };
  claude_api_key: 'configured' | 'missing';
}

export enum EmotionalRecommendation {
  CONTINUE = 'continue',
  PAUSE = 'pause',
  ADAPT = 'adapt',
  RESET = 'reset'
}

export enum EmotionalShiftType {
  POSITIVE = 'positive',
  NEGATIVE = 'negative',
  STABLE = 'stable'
}
