/**
 * @fileoverview Genesis Luminal Evolu√≠do - Sistema de Distribui√ß√µes Din√¢micas
 * 
 * FASE 2.2.2: Sistema completo com 4 distribui√ß√µes din√¢micas de part√≠culas
 * - Distribui√ß√£o Fibonacci: Harm√¥nica e equilibrada
 * - Distribui√ß√£o Espiral: Hipn√≥tica para mystery/curiosity  
 * - Distribui√ß√£o Org√¢nica: Natural para serenity/nostalgia
 * - Distribui√ß√£o Aleat√≥ria: Energ√©tica para ecstasy/power
 * - Transi√ß√µes suaves baseadas no estado emocional dominante
 * - Otimiza√ß√µes de performance para 60+ FPS
 * 
 * @version 2.2.2
 * @author Senior Software Engineering Team
 * @since 2024-09-05
 */

import React, { useRef, useEffect, useState, useCallback } from 'react';

// === INTERFACES OTIMIZADAS ===

interface OptimizedParticle {
  x: number; y: number; z: number;
  vx: number; vy: number; vz: number;
  life: number; maxLife: number;
  size: number; hue: number;
  visible: boolean; lastUpdate: number;
  lodLevel: number; quadrant: number;
  // NOVO: Sistema de distribui√ß√µes din√¢micas
  originalIndex: number;
  targetPosition: Vector3;
  transitionProgress: number;
}

interface Vector3 {
  x: number; y: number; z: number;
}

interface MousePosition {
  x: number; y: number;
}

interface EmotionalDNA {
  joy: number; nostalgia: number; curiosity: number; serenity: number;
  ecstasy: number; mystery: number; power: number;
}

interface EmotionalPrediction {
  predictedEmotion: EmotionalDNA;
  confidence: number;
  timeHorizon: number;
  reasoning: string;
}

// === ENUMS E TIPOS ===

enum DistributionType {
  FIBONACCI = 'fibonacci',
  SPIRAL = 'spiral', 
  ORGANIC = 'organic',
  RANDOM = 'random'
}

interface DistributionConfig {
  name: string;
  emotions: string[];
  description: string;
  algorithm: (index: number, total: number, params?: any) => Vector3;
}

// === SISTEMA DE DISTRIBUI√á√ïES DIN√ÇMICAS ===

class DistributionManager {
  private currentDistribution: DistributionType = DistributionType.FIBONACCI;
  private transitionSpeed: number = 0.02;
  private noiseOffset: number = 0;
  
  private readonly distributions: Record<DistributionType, DistributionConfig> = {
    [DistributionType.FIBONACCI]: {
      name: 'Fibonacci',
      emotions: ['joy', 'balance'],
      description: 'Distribui√ß√£o harm√¥nica baseada na propor√ß√£o √°urea',
      algorithm: this.fibonacciAlgorithm.bind(this)
    },
    [DistributionType.SPIRAL]: {
      name: 'Espiral',
      emotions: ['mystery', 'curiosity'],
      description: 'Padr√£o hipn√≥tico em espiral de Arquimedes',
      algorithm: this.spiralAlgorithm.bind(this)
    },
    [DistributionType.ORGANIC]: {
      name: 'Org√¢nica',
      emotions: ['serenity', 'nostalgia'],
      description: 'Forma√ß√µes naturais com varia√ß√£o org√¢nica',
      algorithm: this.organicAlgorithm.bind(this)
    },
    [DistributionType.RANDOM]: {
      name: 'Aleat√≥ria',
      emotions: ['ecstasy', 'power'],
      description: 'Caos controlado com energia din√¢mica',
      algorithm: this.randomAlgorithm.bind(this)
    }
  };

  private fibonacciAlgorithm(index: number, total: number): Vector3 {
    const goldenRatio = (1 + Math.sqrt(5)) / 2;
    const phi = Math.acos(-1 + (2 * index) / total);
    const theta = 2 * Math.PI * index / goldenRatio;
    
    const baseRadius = 80;
    const radiusVariation = Math.sin(phi * 6) * 30 + Math.cos(theta * 8) * 20;
    const radius = baseRadius + radiusVariation;

    return {
      x: radius * Math.sin(phi) * Math.cos(theta),
      y: radius * Math.sin(phi) * Math.sin(theta),
      z: radius * Math.cos(phi)
    };
  }

  private spiralAlgorithm(index: number, total: number): Vector3 {
    const maxRadius = 120;
    const t = (index / total) * 8 * Math.PI;
    const radius = (t / (8 * Math.PI)) * maxRadius;
    
    const x = radius * Math.cos(t);
    const y = radius * Math.sin(t);
    const z = (index / total - 0.5) * 200 * 2;
    
    const noiseScale = 0.02;
    const noiseX = this.simpleNoise(x * noiseScale, y * noiseScale, z * noiseScale);
    const noiseY = this.simpleNoise(y * noiseScale, z * noiseScale, x * noiseScale);
    const noiseZ = this.simpleNoise(z * noiseScale, x * noiseScale, y * noiseScale);
    
    return {
      x: x + noiseX * 15,
      y: y + noiseY * 15,
      z: z + noiseZ * 15
    };
  }

  private organicAlgorithm(index: number, total: number): Vector3 {
    const phi = Math.acos(-1 + (2 * index) / total);
    const theta = Math.sqrt(total * Math.PI) * phi;
    
    const baseRadius = 90;
    const organicScale = 0.03;
    
    const noise1 = this.simpleNoise(index * organicScale, this.noiseOffset, 0) * 40;
    const noise2 = this.simpleNoise(index * organicScale * 2, this.noiseOffset * 2, 100) * 20;
    const noise3 = this.simpleNoise(index * organicScale * 4, this.noiseOffset * 4, 200) * 10;
    
    const radius = baseRadius + noise1 + noise2 + noise3;
    
    const phiNoise = this.simpleNoise(index * 0.01, 0, this.noiseOffset) * 0.3;
    const thetaNoise = this.simpleNoise(0, index * 0.01, this.noiseOffset) * 0.3;
    
    const finalPhi = phi + phiNoise;
    const finalTheta = theta + thetaNoise;

    return {
      x: radius * Math.sin(finalPhi) * Math.cos(finalTheta),
      y: radius * Math.sin(finalPhi) * Math.sin(finalTheta),
      z: radius * Math.cos(finalPhi)
    };
  }

  private randomAlgorithm(index: number, total: number): Vector3 {
    const seed = index / total;
    
    const gaussianRadius = this.gaussianRandom(seed) * 60 + 40;
    const randomPhi = this.seededRandom(seed * 2) * Math.PI;
    const randomTheta = this.seededRandom(seed * 3) * 2 * Math.PI;
    
    const clusterOffset = {
      x: this.seededRandom(seed * 4) * 40 - 20,
      y: this.seededRandom(seed * 5) * 40 - 20,
      z: this.seededRandom(seed * 6) * 40 - 20
    };

    return {
      x: gaussianRadius * Math.sin(randomPhi) * Math.cos(randomTheta) + clusterOffset.x,
      y: gaussianRadius * Math.sin(randomPhi) * Math.sin(randomTheta) + clusterOffset.y,
      z: gaussianRadius * Math.cos(randomPhi) + clusterOffset.z
    };
  }

  private simpleNoise(x: number, y: number, z: number): number {
    const n = Math.sin(x * 12.9898 + y * 78.233 + z * 37.719) * 43758.5453;
    return 2.0 * (n - Math.floor(n)) - 1.0;
  }

  private gaussianRandom(seed: number): number {
    const u1 = this.seededRandom(seed);
    const u2 = this.seededRandom(seed * 1.1);
    return Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
  }

  private seededRandom(seed: number): number {
    const x = Math.sin(seed) * 10000;
    return x - Math.floor(x);
  }

  determineDistributionFromEmotion(dominantEmotion: string): DistributionType {
    const emotionToDistribution: Record<string, DistributionType> = {
      mystery: DistributionType.SPIRAL,
      curiosity: DistributionType.SPIRAL,
      serenity: DistributionType.ORGANIC,
      nostalgia: DistributionType.ORGANIC,
      ecstasy: DistributionType.RANDOM,
      power: DistributionType.RANDOM,
      joy: DistributionType.FIBONACCI
    };

    return emotionToDistribution[dominantEmotion] || DistributionType.FIBONACCI;
  }

  generateDistribution(type: DistributionType, particleCount: number): Vector3[] {
    const config = this.distributions[type];
    const positions: Vector3[] = [];

    for (let i = 0; i < particleCount; i++) {
      positions.push(config.algorithm(i, particleCount));
    }

    return positions;
  }

  updateNoiseOffset(deltaTime: number): void {
    this.noiseOffset += deltaTime * 0.001;
  }

  getCurrentDistribution(): DistributionConfig {
    return this.distributions[this.currentDistribution];
  }

  setCurrentDistribution(type: DistributionType): void {
    this.currentDistribution = type;
  }
}

// === SISTEMA DE PART√çCULAS OTIMIZADO ===

class ParticlePool {
  private pool: OptimizedParticle[] = [];
  private poolSize: number;
  private distributionManager: DistributionManager;
  private isTransitioning: boolean = false;
  private transitionStartTime: number = 0;
  private transitionDuration: number = 3000;

  constructor(size: number = 2000) {
    this.poolSize = size;
    this.distributionManager = new DistributionManager();
    this.initializePool();
  }

  private initializePool(): void {
    const positions = this.distributionManager.generateDistribution(
      DistributionType.FIBONACCI, 
      this.poolSize
    );

    for (let i = 0; i < this.poolSize; i++) {
      const position = positions[i];
      this.pool.push(this.createParticle(i, position));
    }
  }

  private createParticle(index: number, position: Vector3): OptimizedParticle {
    return {
      x: position.x, y: position.y, z: position.z,
      vx: (Math.random() - 0.5) * 0.3,
      vy: (Math.random() - 0.5) * 0.3,
      vz: (Math.random() - 0.5) * 0.3,
      life: Math.random(), maxLife: 1,
      size: Math.random() * 4 + 0.5,
      hue: Math.random() * 360,
      visible: true, lastUpdate: 0,
      lodLevel: 0, quadrant: 0,
      originalIndex: index,
      targetPosition: { ...position },
      transitionProgress: 1
    };
  }

  transitionToDistribution(newType: DistributionType, reason: string = ''): void {
    const currentType = this.distributionManager.getCurrentDistribution();
    
    if (currentType.name === this.distributionManager.distributions[newType].name) {
      return;
    }

    console.log(`üîÑ Iniciando transi√ß√£o para ${newType}. Motivo: ${reason}`);
    
    const newPositions = this.distributionManager.generateDistribution(newType, this.poolSize);
    
    this.pool.forEach((particle, index) => {
      particle.targetPosition = newPositions[index];
      particle.transitionProgress = 0;
    });
    
    this.isTransitioning = true;
    this.transitionStartTime = performance.now();
    this.distributionManager.setCurrentDistribution(newType);
  }

  updateTransitions(timestamp: number): void {
    if (!this.isTransitioning) return;

    const elapsed = timestamp - this.transitionStartTime;
    const progress = Math.min(elapsed / this.transitionDuration, 1);
    
    const easedProgress = progress * progress * (3 - 2 * progress);
    
    let allTransitioned = true;
    
    this.pool.forEach(particle => {
      if (particle.transitionProgress < 1) {
        allTransitioned = false;
        particle.transitionProgress = easedProgress;
        
        const current = { x: particle.x, y: particle.y, z: particle.z };
        const target = particle.targetPosition;
        
        particle.x = current.x + (target.x - current.x) * easedProgress;
        particle.y = current.y + (target.y - current.y) * easedProgress;
        particle.z = current.z + (target.z - current.z) * easedProgress;
      }
    });
    
    if (allTransitioned) {
      this.isTransitioning = false;
      console.log(`‚úÖ Transi√ß√£o para ${this.distributionManager.getCurrentDistribution().name} conclu√≠da`);
    }
  }

  // M√©todos existentes otimizados
  getParticles(): OptimizedParticle[] {
    return this.pool;
  }

  applyLOD(centerX: number, centerY: number, timestamp: number): void {
    const now = timestamp;
    
    this.pool.forEach(particle => {
      const distance = Math.sqrt(
        particle.x * particle.x + 
        particle.y * particle.y + 
        particle.z * particle.z
      );
      
      if (distance < 150) {
        particle.lodLevel = 0;
      } else if (distance < 300) {
        particle.lodLevel = 1;
        if (now - particle.lastUpdate < 33) return;
      } else {
        particle.lodLevel = 2;
        if (now - particle.lastUpdate < 66) return;
      }
      
      particle.lastUpdate = now;
    });
  }

  applyCulling(
    centerX: number, centerY: number, 
    width: number, height: number,
    mousePosition: MousePosition
  ): OptimizedParticle[] {
    const margin = 100;
    const visibleParticles: OptimizedParticle[] = [];
    
    this.pool.forEach(particle => {
      const perspective = 400;
      const scale = perspective / (perspective + particle.z);
      const projectedX = centerX + particle.x * scale;
      const projectedY = centerY + particle.y * scale;
      
      const inBounds = 
        projectedX >= -margin && 
        projectedX <= width + margin &&
        projectedY >= -margin && 
        projectedY <= height + margin &&
        particle.z > -500;
      
      if (inBounds) {
        particle.quadrant = 
          (projectedX < centerX ? 0 : 1) + 
          (projectedY < centerY ? 0 : 2);
        
        particle.visible = true;
        visibleParticles.push(particle);
      } else {
        particle.visible = false;
      }
    });
    
    return visibleParticles;
  }

  getDistributionManager(): DistributionManager {
    return this.distributionManager;
  }

  isCurrentlyTransitioning(): boolean {
    return this.isTransitioning;
  }

  getTransitionProgress(): number {
    if (!this.isTransitioning) return 1;
    
    const totalProgress = this.pool.reduce((sum, particle) => sum + particle.transitionProgress, 0);
    return totalProgress / this.pool.length;
  }
}

// === SISTEMA DE RENDERIZA√á√ÉO OTIMIZADO ===

class OptimizedRenderer {
  private particleBatches: Map<number, OptimizedParticle[]> = new Map();
  
  batchParticles(particles: OptimizedParticle[]): void {
    this.particleBatches.clear();
    
    particles.forEach(particle => {
      if (!particle.visible) return;
      
      const batchKey = particle.lodLevel * 10 + particle.quadrant;
      
      if (!this.particleBatches.has(batchKey)) {
        this.particleBatches.set(batchKey, []);
      }
      this.particleBatches.get(batchKey)!.push(particle);
    });
  }
  
  renderBatches(
    ctx: CanvasRenderingContext2D,
    centerX: number, centerY: number,
    mousePosition: MousePosition,
    emotionalIntensity: number,
    dominantHue: number,
    timestamp: number
  ): number {
    let renderedCount = 0;
    const mouseInfluence = 80 + emotionalIntensity * 150;
    
    ctx.save();
    ctx.globalCompositeOperation = 'screen';
    
    const sortedBatches = Array.from(this.particleBatches.entries())
      .sort(([a], [b]) => Math.floor(a / 10) - Math.floor(b / 10));
    
    sortedBatches.forEach(([batchKey, batch]) => {
      const lodLevel = Math.floor(batchKey / 10);
      
      // OTIMIZA√á√ÉO: Pular frames para LOD baixo
      if (lodLevel === 2 && Math.floor(timestamp / 66) % 2 !== 0) return;
      if (lodLevel === 1 && Math.floor(timestamp / 33) % 2 !== 0) return;
      
      batch.forEach(particle => {
        this.renderParticle(
          ctx, particle, centerX, centerY, 
          mousePosition, mouseInfluence, 
          emotionalIntensity, dominantHue, timestamp
        );
        renderedCount++;
      });
    });
    
    ctx.restore();
    return renderedCount;
  }
  
  private renderParticle(
    ctx: CanvasRenderingContext2D,
    particle: OptimizedParticle,
    centerX: number, centerY: number,
    mousePosition: MousePosition,
    mouseInfluence: number,
    emotionalIntensity: number,
    dominantHue: number,
    timestamp: number
  ): void {
    // Rota√ß√µes 3D otimizadas
    const rotY = mousePosition.x * Math.PI * 3 + timestamp * 0.0008;
    const rotX = mousePosition.y * Math.PI * 2 + timestamp * 0.0006;

    let x = particle.x, y = particle.y, z = particle.z;

    const cosY = Math.cos(rotY), sinY = Math.sin(rotY);
    const cosX = Math.cos(rotX), sinX = Math.sin(rotX);

    let tempX = x * cosY - z * sinY;
    z = x * sinY + z * cosY;
    x = tempX;

    let tempY = y * cosX - z * sinX;
    z = y * sinX + z * cosX;
    y = tempY;

    // Proje√ß√£o perspectiva
    const perspective = 400;
    const scale = perspective / (perspective + z);
    const projectedX = centerX + x * scale;
    const projectedY = centerY + y * scale;

    // C√°lculo de influ√™ncia do mouse
    const mouseWorldX = (mousePosition.x - 0.5) * window.innerWidth * 0.5;
    const mouseWorldY = (mousePosition.y - 0.5) * window.innerHeight * 0.5;
    const distToMouse = Math.sqrt(
      Math.pow(projectedX - centerX - mouseWorldX, 2) + 
      Math.pow(projectedY - centerY - mouseWorldY, 2)
    );

    const mouseEffect = Math.max(0, 1 - distToMouse / mouseInfluence);
    
    // Anima√ß√£o org√¢nica OTIMIZADA
    if (particle.lodLevel <= 1) { // Apenas alta e m√©dia qualidade
      const timeOffset = timestamp * 0.001;
      particle.x += particle.vx + Math.sin(timeOffset + particle.x * 0.01) * emotionalIntensity * 0.8;
      particle.y += particle.vy + Math.cos(timeOffset + particle.y * 0.01) * emotionalIntensity * 0.6;
      particle.z += particle.vz + Math.sin(timeOffset * 0.5 + particle.z * 0.01) * emotionalIntensity * 0.7;

      // Conten√ß√£o no espa√ßo 3D
      const distance = Math.sqrt(particle.x ** 2 + particle.y ** 2 + particle.z ** 2);
      if (distance > 250) {
        particle.x *= 0.92;
        particle.y *= 0.92;
        particle.z *= 0.92;
      }
    }

    // Propriedades visuais
    const depth = (300 + z) / 600;
    const alpha = (0.2 + mouseEffect * 0.8) * depth;
    const size = (particle.size + mouseEffect * 4) * scale * (0.5 + depth * 0.5);
    const saturation = 70 + mouseEffect * 30;
    const lightness = 50 + emotionalIntensity * 40 + mouseEffect * 20;

    const particleHue = dominantHue + (Math.sin(particle.x * 0.01) * 60);
    
    // Renderiza√ß√£o com LOD
    if (particle.lodLevel === 0 && alpha > 0.3) {
      // Alta qualidade: part√≠cula + glow
      const glowGradient = ctx.createRadialGradient(
        projectedX, projectedY, 0, 
        projectedX, projectedY, size * 2
      );
      glowGradient.addColorStop(0, `hsla(${particleHue}, ${saturation}%, ${lightness}%, ${alpha})`);
      glowGradient.addColorStop(0.5, `hsla(${particleHue}, ${saturation}%, ${lightness}%, ${alpha * 0.5})`);
      glowGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
      
      ctx.fillStyle = glowGradient;
      ctx.beginPath();
      ctx.arc(projectedX, projectedY, size * 2, 0, Math.PI * 2);
      ctx.fill();
    }
    
    // Core da part√≠cula
    ctx.fillStyle = `hsla(${particleHue}, ${saturation + 20}%, ${lightness + 10}%, ${alpha * 1.5})`;
    ctx.beginPath();
    ctx.arc(projectedX, projectedY, size, 0, Math.PI * 2);
    ctx.fill();
  }
}

// === SISTEMAS AUXILIARES ===

class SimplePredictionEngine {
  private emotionalHistory: EmotionalDNA[] = [];
  private maxHistorySize: number = 10;
  private accuracy: number = 0.72;

  addEmotionalState(dna: EmotionalDNA): void {
    this.emotionalHistory.push({ ...dna });
    
    if (this.emotionalHistory.length > this.maxHistorySize) {
      this.emotionalHistory.shift();
    }

    this.accuracy = Math.min(0.92, 0.72 + (this.emotionalHistory.length * 0.02));
  }

  predictNextState(): EmotionalPrediction | null {
    if (this.emotionalHistory.length < 3) {
      return null;
    }

    const recent = this.emotionalHistory.slice(-3);
    const trends = this.calculateTrends(recent);
    const currentState = recent[recent.length - 1];
    
    const predictedEmotion: EmotionalDNA = {
      joy: this.clamp(currentState.joy + trends.joy),
      nostalgia: this.clamp(currentState.nostalgia + trends.nostalgia),
      curiosity: this.clamp(currentState.curiosity + trends.curiosity),
      serenity: this.clamp(currentState.serenity + trends.serenity),
      ecstasy: this.clamp(currentState.ecstasy + trends.ecstasy),
      mystery: this.clamp(currentState.mystery + trends.mystery),
      power: this.clamp(currentState.power + trends.power)
    };

    return {
      predictedEmotion,
      confidence: this.accuracy,
      timeHorizon: 3000,
      reasoning: `Baseado em ${this.emotionalHistory.length} estados hist√≥ricos`
    };
  }

  private calculateTrends(states: EmotionalDNA[]): EmotionalDNA {
    if (states.length < 2) {
      return { joy: 0, nostalgia: 0, curiosity: 0, serenity: 0, ecstasy: 0, mystery: 0, power: 0 };
    }

    const first = states[0];
    const last = states[states.length - 1];
    const steps = states.length - 1;

    return {
      joy: (last.joy - first.joy) / steps,
      nostalgia: (last.nostalgia - first.nostalgia) / steps,
      curiosity: (last.curiosity - first.curiosity) / steps,
      serenity: (last.serenity - first.serenity) / steps,
      ecstasy: (last.ecstasy - first.ecstasy) / steps,
      mystery: (last.mystery - first.mystery) / steps,
      power: (last.power - first.power) / steps
    };
  }

  private clamp(value: number): number {
    return Math.max(0, Math.min(1, value));
  }

  getMetrics() {
    return {
      accuracy: this.accuracy,
      historySize: this.emotionalHistory.length,
      maxHistorySize: this.maxHistorySize,
      isReady: this.emotionalHistory.length >= 3
    };
  }
}

class CelestialAudioSystem {
  private audioContext: AudioContext | null = null;
  private oscillators: OscillatorNode[] = [];
  private gainNodes: GainNode[] = [];
  private filterNode: BiquadFilterNode | null = null;
  private delayNode: DelayNode | null = null;
  private reverbNode: ConvolverNode | null = null;
  private currentScale: string = 'ethereal';
  private isActive: boolean = false;

  private scales: { [key: string]: any } = {
    ethereal: {
      name: 'Et√©rea',
      frequencies: [174, 285, 396, 528, 741],
      emotions: ['serenity', 'mystery', 'nostalgia'],
      timbre: 'sine' as OscillatorType
    },
    mystical: {
      name: 'M√≠stica',
      frequencies: [220, 330, 440, 660, 880],
      emotions: ['mystery', 'curiosity', 'power'],
      timbre: 'triangle' as OscillatorType
    },
    transcendent: {
      name: 'Transcendente',
      frequencies: [256, 384, 512, 768, 1024],
      emotions: ['joy', 'ecstasy', 'power'],
      timbre: 'sawtooth' as OscillatorType
    },
    celestial: {
      name: 'Celestial',
      frequencies: [432, 528, 639, 741, 852],
      emotions: ['joy', 'serenity', 'transcendence'],
      timbre: 'sine' as OscillatorType
    }
  };

  async initialize(): Promise<void> {
    try {
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      await this.audioContext.resume();
      
      this.filterNode = this.audioContext.createBiquadFilter();
      this.filterNode.type = 'lowpass';
      this.filterNode.frequency.value = 800;
      this.filterNode.Q.value = 1;

      this.delayNode = this.audioContext.createDelay(1.0);
      this.delayNode.delayTime.value = 0.3;

      this.reverbNode = this.audioContext.createConvolver();
      const impulseBuffer = this.audioContext.createBuffer(2, this.audioContext.sampleRate * 2, this.audioContext.sampleRate);
      for (let channel = 0; channel < impulseBuffer.numberOfChannels; channel++) {
        const channelData = impulseBuffer.getChannelData(channel);
        for (let i = 0; i < channelData.length; i++) {
          channelData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / channelData.length, 2);
        }
      }
      this.reverbNode.buffer = impulseBuffer;

      this.filterNode.connect(this.delayNode);
      this.delayNode.connect(this.reverbNode);
      this.reverbNode.connect(this.audioContext.destination);

    } catch (error) {
      console.log('√Åudio n√£o dispon√≠vel');
    }
  }

  private getScaleForEmotion(dominantEmotion: string): string {
    if (['serenity', 'mystery', 'nostalgia'].includes(dominantEmotion)) {
      return 'ethereal';
    } else if (['mystery', 'curiosity', 'power'].includes(dominantEmotion)) {
      return 'mystical';
    } else if (['joy', 'ecstasy', 'power'].includes(dominantEmotion)) {
      return 'transcendent';
    } else {
      return 'celestial';
    }
  }

  private async transitionToScale(newScale: string, emotionalIntensity: number): Promise<void> {
    if (!this.audioContext || this.currentScale === newScale) return;

    const fadeTime = 2.0;
    const currentTime = this.audioContext.currentTime;

    this.gainNodes.forEach(gain => {
      gain.gain.exponentialRampToValueAtTime(0.001, currentTime + fadeTime);
    });

    setTimeout(() => {
      this.stopOscillators();
      this.currentScale = newScale;
      this.createOscillators(emotionalIntensity);
    }, fadeTime * 1000);
  }

  private createOscillators(emotionalIntensity: number): void {
    if (!this.audioContext || !this.filterNode) return;

    const scale = this.scales[this.currentScale];
    
    scale.frequencies.forEach((freq: number, index: number) => {
      const oscillator = this.audioContext!.createOscillator();
      const gain = this.audioContext!.createGain();
      
      oscillator.type = scale.timbre;
      oscillator.frequency.value = freq;
      
      const baseVolume = 0.015 + (emotionalIntensity * 0.02);
      const volumeMultiplier = 1 - (index * 0.15);
      gain.gain.value = baseVolume * volumeMultiplier;
      
      oscillator.connect(gain);
      gain.connect(this.filterNode!);
      
      oscillator.start();
      
      this.oscillators.push(oscillator);
      this.gainNodes.push(gain);
    });
  }

  updateEmotionalParameters(
    mousePosition: { x: number; y: number },
    emotionalDNA: EmotionalDNA,
    emotionalIntensity: number,
    dominantEmotion: string
  ): void {
    if (!this.audioContext || !this.filterNode || !this.delayNode) return;

    const currentTime = this.audioContext.currentTime;
    const newScale = this.getScaleForEmotion(dominantEmotion);

    if (this.currentScale !== newScale) {
      this.transitionToScale(newScale, emotionalIntensity);
    }

    const filterFreq = 200 + (1 - mousePosition.y) * 1500;
    this.filterNode.frequency.exponentialRampToValueAtTime(filterFreq, currentTime + 0.1);

    const delayTime = 0.1 + (mousePosition.x * 0.4);
    this.delayNode.delayTime.exponentialRampToValueAtTime(delayTime, currentTime + 0.1);

    this.gainNodes.forEach((gain, index) => {
      const scale = this.scales[this.currentScale];
      let emotionalBoost = 1;

      scale.emotions.forEach((emotion: string) => {
        if (emotionalDNA[emotion as keyof EmotionalDNA]) {
          emotionalBoost += emotionalDNA[emotion as keyof EmotionalDNA] * 0.3;
        }
      });

      const baseVolume = 0.015 + (emotionalIntensity * 0.02);
      const volumeMultiplier = (1 - (index * 0.15)) * emotionalBoost;
      const newVolume = Math.min(0.08, baseVolume * volumeMultiplier);
      
      gain.gain.exponentialRampToValueAtTime(newVolume, currentTime + 0.2);
    });

    const qValue = 1 + (emotionalIntensity * 3);
    this.filterNode.Q.exponentialRampToValueAtTime(qValue, currentTime + 0.1);
  }

  async start(emotionalIntensity: number): Promise<void> {
    if (this.isActive) return;

    await this.initialize();
    this.createOscillators(emotionalIntensity);
    this.isActive = true;
  }

  stop(): void {
    if (!this.isActive) return;

    this.stopOscillators();
    this.isActive = false;
  }

  private stopOscillators(): void {
    this.oscillators.forEach(osc => {
      try {
        osc.stop();
      } catch (e) {
        // Oscillator j√° parado
      }
    });
    this.oscillators = [];
    this.gainNodes = [];
  }

  getCurrentScale(): string {
    return this.scales[this.currentScale].name;
  }

  isAudioActive(): boolean {
    return this.isActive;
  }
}

// === COMPONENTE EMOCIONAL ===
const EmotionalBar: React.FC<{
  emotion: string;
  value: number;
  color: string;
  isDominant: boolean;
}> = ({ emotion, value, color, isDominant }) => {
  return (
    <div style={{
      marginBottom: '0.8rem',
      opacity: isDominant ? 1 : 0.7,
      transform: isDominant ? 'scale(1.05)' : 'scale(1)',
      transition: 'all 0.3s ease'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '0.3rem'
      }}>
        <span style={{
          fontSize: '0.85rem',
          color: isDominant ? color : 'rgba(255, 255, 255, 0.8)',
          fontWeight: isDominant ? 'bold' : 'normal',
          textShadow: isDominant ? `0 0 10px ${color}` : 'none',
          transition: 'all 0.3s ease'
        }}>
          {emotion}
          {isDominant && ' ‚ú®'}
        </span>
        <span style={{
          fontSize: '0.75rem',
          color: color,
          fontWeight: 'bold'
        }}>
          {Math.round(value * 100)}%
        </span>
      </div>
      
      <div style={{
        width: '100%',
        height: isDominant ? '8px' : '6px',
        backgroundColor: 'rgba(255, 255, 255, 0.1)',
        borderRadius: '10px',
        overflow: 'hidden',
        border: isDominant ? `1px solid ${color}` : 'none',
        boxShadow: isDominant ? `0 0 15px ${color}40` : 'none',
        transition: 'all 0.3s ease'
      }}>
        <div style={{
          width: `${value * 100}%`,
          height: '100%',
          background: `linear-gradient(90deg, ${color}80, ${color})`,
          borderRadius: '10px',
          transition: 'width 0.5s ease, box-shadow 0.3s ease',
          boxShadow: isDominant ? `0 0 10px ${color}60` : `0 0 5px ${color}40`
        }} />
      </div>
    </div>
  );
};

// === COMPONENTE PRINCIPAL ===

export const GenesisCore: React.FC = () => {
  // Refs para sistemas otimizados
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number>();
  const lastTimeRef = useRef<number>(0);
  const lastUpdateRef = useRef<number>(0);
  const lastDistributionCheck = useRef<number>(0);
  
  // NOVO: Sistemas otimizados para distribui√ß√µes din√¢micas
  const particlePoolRef = useRef<ParticlePool>(new ParticlePool(2000));
  const rendererRef = useRef<OptimizedRenderer>(new OptimizedRenderer());
  
  // Sistemas existentes
  const predictionEngineRef = useRef<SimplePredictionEngine>(new SimplePredictionEngine());
  const audioSystemRef = useRef<CelestialAudioSystem>(new CelestialAudioSystem());
  
  // Estados
  const [mousePosition, setMousePosition] = useState<MousePosition>({ x: 0.5, y: 0.5 });
  const [emotionalIntensity, setEmotionalIntensity] = useState(0);
  const [debugMode, setDebugMode] = useState(false);
  const [audioEnabled, setAudioEnabled] = useState(false);
  const [currentAudioScale, setCurrentAudioScale] = useState<string>('Et√©rea');
  
  // NOVO: Estados para sistema de distribui√ß√µes
  const [currentDistribution, setCurrentDistribution] = useState<string>('Fibonacci');
  const [isTransitioning, setIsTransitioning] = useState<boolean>(false);
  const [transitionProgress, setTransitionProgress] = useState<number>(1);
  
  const [emotionalDNA, setEmotionalDNA] = useState<EmotionalDNA>({
    joy: 0.3, nostalgia: 0.2, curiosity: 0.8, serenity: 0.5,
    ecstasy: 0.1, mystery: 0.6, power: 0.4
  });
  
  const [currentPrediction, setCurrentPrediction] = useState<EmotionalPrediction | null>(null);
  const [predictionMetrics, setPredictionMetrics] = useState({
    accuracy: 0.72,
    historySize: 0,
    isReady: false
  });
  
  // NOVO: M√©tricas expandidas para distribui√ß√µes
  const [performanceMetrics, setPerformanceMetrics] = useState({
    fps: 60,
    inputLatency: 0,
    memoryUsage: 0,
    particleCount: 2000,
    visibleParticles: 0,
    renderedParticles: 0,
    distributionTransitions: 0
  });
  
  const [experienceMetrics, setExperienceMetrics] = useState({
    encantamentRate: 25,
    retentionRate: 20,
    interactionFrequency: 24.8,
    emotionalEngagement: 75
  });
  
  const [profileStats, setProfileStats] = useState({
    totalSessions: 4,
    personalityType: 'Equilibrado',
    explorationScore: 2,
    memoryEntries: 100
  });

  // Defini√ß√µes das emo√ß√µes
  const emotionDefinitions = [
    { key: 'joy', name: 'Joy', color: '#FFD700' },
    { key: 'nostalgia', name: 'Nostalgia', color: '#8A2BE2' },
    { key: 'curiosity', name: 'Curiosity', color: '#00CED1' },
    { key: 'serenity', name: 'Serenity', color: '#98FB98' },
    { key: 'ecstasy', name: 'Ecstasy', color: '#FF1493' },
    { key: 'mystery', name: 'Mystery', color: '#483D8B' },
    { key: 'power', name: 'Power', color: '#DC143C' }
  ];

  // Fun√ß√µes auxiliares
  const getDominantEmotion = useCallback((dna: EmotionalDNA): string => {
    let dominant = { emotion: 'joy', value: 0 };
    Object.entries(dna).forEach(([emotion, value]) => {
      if (value > dominant.value) {
        dominant = { emotion, value };
      }
    });
    return dominant.emotion;
  }, []);

  const calculateEmotionalDNA = useCallback((x: number, y: number): EmotionalDNA => {
    const distance = Math.sqrt(x * x + y * y);
    const angle = Math.atan2(y, x);
    
    return {
      joy: Math.max(0, Math.min(1, (1 - distance) * 0.8 + 0.2)),
      nostalgia: Math.max(0, Math.min(1, (Math.sin(angle) + 1) * 0.5)),
      curiosity: Math.max(0, Math.min(1, distance)),
      serenity: Math.max(0, Math.min(1, (Math.cos(angle * 2) + 1) * 0.5)),
      ecstasy: Math.max(0, Math.min(1, Math.max(0, distance - 0.5) * 2)),
      mystery: Math.max(0, Math.min(1, (Math.sin(angle * 3) + 1) * 0.5)),
      power: Math.max(0, Math.min(1, Math.abs(x) + Math.abs(y)))
    };
  }, []);

  const getDominantEmotionColor = useCallback((dna: EmotionalDNA): number => {
    const emotions = {
      joy: { value: dna.joy, hue: 45 },
      nostalgia: { value: dna.nostalgia, hue: 270 },
      curiosity: { value: dna.curiosity, hue: 180 },
      serenity: { value: dna.serenity, hue: 120 },
      ecstasy: { value: dna.ecstasy, hue: 320 },
      mystery: { value: dna.mystery, hue: 240 },
      power: { value: dna.power, hue: 0 }
    };

    let dominant = { emotion: 'joy', value: 0, hue: 45 };
    Object.entries(emotions).forEach(([emotion, data]) => {
      if (data.value > dominant.value) {
        dominant = { emotion, value: data.value, hue: data.hue };
      }
    });

    return dominant.hue;
  }, []);

  /**
   * NOVA: Fun√ß√£o para verificar e disparar transi√ß√µes de distribui√ß√£o
   */
  const checkDistributionTransition = useCallback((dominantEmotion: string, timestamp: number) => {
    // Verificar apenas a cada 2 segundos para evitar transi√ß√µes excessivas
    if (timestamp - lastDistributionCheck.current < 2000) return;
    
    const particlePool = particlePoolRef.current;
    const distributionManager = particlePool.getDistributionManager();
    const recommendedType = distributionManager.determineDistributionFromEmotion(dominantEmotion);
    const currentConfig = distributionManager.getCurrentDistribution();
    
    // Mapear enum para string para compara√ß√£o
    const typeNames = {
      [DistributionType.FIBONACCI]: 'Fibonacci',
      [DistributionType.SPIRAL]: 'Espiral',
      [DistributionType.ORGANIC]: 'Org√¢nica',
      [DistributionType.RANDOM]: 'Aleat√≥ria'
    };
    
    const recommendedName = typeNames[recommendedType];
    
    if (recommendedName !== currentConfig.name && !particlePool.isCurrentlyTransitioning()) {
      particlePool.transitionToDistribution(
        recommendedType, 
        `Emo√ß√£o dominante: ${dominantEmotion}`
      );
      
      setCurrentDistribution(recommendedName);
      setIsTransitioning(true);
      
      // Incrementar contador de transi√ß√µes
      setPerformanceMetrics(prev => ({
        ...prev,
        distributionTransitions: prev.distributionTransitions + 1
      }));
      
      console.log(`üé® Transi√ß√£o para distribui√ß√£o ${recommendedName} iniciada`);
    }
    
    lastDistributionCheck.current = timestamp;
  }, []);

  /**
   * NOVA: Fun√ß√£o de renderiza√ß√£o com sistema de distribui√ß√µes din√¢micas
   */
  const renderFrame = useCallback((timestamp: number) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // OTIMIZA√á√ÉO: M√©tricas de performance melhoradas
    const deltaTime = timestamp - lastTimeRef.current;
    if (deltaTime > 0) {
      const currentFPS = Math.round(1000 / deltaTime);
      setPerformanceMetrics(prev => ({
        ...prev,
        fps: currentFPS
      }));
    }
    lastTimeRef.current = timestamp;

    const { width, height } = canvas;
    const centerX = width / 2;
    const centerY = height / 2;

    const dominantHue = getDominantEmotionColor(emotionalDNA);
    
    // Fundo otimizado
    const bgGradient = ctx.createRadialGradient(
      centerX + (mousePosition.x - 0.5) * 200, 
      centerY + (mousePosition.y - 0.5) * 200, 
      0, 
      centerX, centerY, 
      Math.max(width, height) * 0.8
    );
    
    bgGradient.addColorStop(0, `hsla(${dominantHue}, 40%, 8%, 1)`);
    bgGradient.addColorStop(0.3, `hsla(${(dominantHue + 80) % 360}, 50%, 5%, 0.9)`);
    bgGradient.addColorStop(0.7, `hsla(${(dominantHue + 160) % 360}, 30%, 3%, 0.7)`);
    bgGradient.addColorStop(1, 'hsla(240, 60%, 1%, 0.5)');
    
    ctx.fillStyle = bgGradient;
    ctx.fillRect(0, 0, width, height);

    // N√∫cleo central otimizado
    const breathScale = 1 + Math.sin(timestamp * 0.002) * 0.2 + emotionalIntensity * 0.5;
    const coreRadius = 60 * breathScale;
    
    for (let layer = 0; layer < 4; layer++) {
      const layerRadius = coreRadius * (1 - layer * 0.2);
      const layerGradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, layerRadius);
      
      const baseHue = (dominantHue + layer * 30) % 360;
      
      layerGradient.addColorStop(0, `hsla(${baseHue}, 90%, 80%, ${0.8 - layer * 0.15})`);
      layerGradient.addColorStop(0.4, `hsla(${(baseHue + 40) % 360}, 95%, 70%, ${0.6 - layer * 0.1})`);
      layerGradient.addColorStop(0.8, `hsla(${(baseHue + 80) % 360}, 80%, 60%, ${0.3 - layer * 0.05})`);
      layerGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');

      ctx.save();
      ctx.globalCompositeOperation = layer === 0 ? 'screen' : 'lighter';
      ctx.fillStyle = layerGradient;
      ctx.beginPath();
      ctx.arc(centerX, centerY, layerRadius, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();
    }

    // NOVO: Sistema de distribui√ß√µes din√¢micas
    const particlePool = particlePoolRef.current;
    const renderer = rendererRef.current;
    
    // Atualizar transi√ß√µes de distribui√ß√£o
    particlePool.updateTransitions(timestamp);
    
    // Atualizar estados de UI
    const currentlyTransitioning = particlePool.isCurrentlyTransitioning();
    const currentProgress = particlePool.getTransitionProgress();
    
    setIsTransitioning(currentlyTransitioning);
    setTransitionProgress(currentProgress);
    
    // Aplicar otimiza√ß√µes
    particlePool.applyLOD(centerX, centerY, timestamp);
    const visibleParticles = particlePool.applyCulling(centerX, centerY, width, height, mousePosition);
    
    // Agrupar em batches para renderiza√ß√£o otimizada
    renderer.batchParticles(visibleParticles);
    
    // Renderizar com sistema otimizado
    const renderedCount = renderer.renderBatches(
      ctx, centerX, centerY, mousePosition, 
      emotionalIntensity, dominantHue, timestamp
    );

    // Atualizar m√©tricas de part√≠culas
    setPerformanceMetrics(prev => ({
      ...prev,
      particleCount: 2000,
      visibleParticles: visibleParticles.length,
      renderedParticles: renderedCount
    }));

    // C√≠rculo de predi√ß√£o
    if (currentPrediction) {
      const predictionHue = getDominantEmotionColor(currentPrediction.predictedEmotion);
      const predictionRadius = coreRadius + 40;
      
      ctx.save();
      ctx.strokeStyle = `hsla(${predictionHue}, 80%, 70%, ${currentPrediction.confidence})`;
      ctx.lineWidth = 3;
      ctx.setLineDash([10, 5]);
      ctx.beginPath();
      ctx.arc(centerX, centerY, predictionRadius, 0, Math.PI * 2);
      ctx.stroke();
      ctx.restore();
    }

    // Ondas de energia otimizadas
    for (let i = 0; i < 5; i++) {
      const waveRadius = (40 + i * 25) * (1 + Math.sin(timestamp * 0.003 + i * 0.8) * 0.4) + emotionalIntensity * 40;
      const waveGradient = ctx.createRadialGradient(centerX, centerY, waveRadius - 8, centerX, centerY, waveRadius + 8);
      waveGradient.addColorStop(0, 'rgba(255, 255, 255, 0)');
      waveGradient.addColorStop(0.5, `hsla(${(dominantHue + i * 45) % 360}, 80%, 70%, ${0.4 * (1 - i * 0.15)})`);
      waveGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');

      ctx.save();
      ctx.globalCompositeOperation = 'screen';
      ctx.strokeStyle = waveGradient;
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.arc(centerX, centerY, waveRadius, 0, Math.PI * 2);
      ctx.stroke();
      ctx.restore();
    }

    // NOVO: Verificar necessidade de transi√ß√£o de distribui√ß√£o
    const dominantEmotion = getDominantEmotion(emotionalDNA);
    checkDistributionTransition(dominantEmotion, timestamp);

    animationRef.current = requestAnimationFrame(renderFrame);
  }, [mousePosition, emotionalIntensity, emotionalDNA, currentPrediction, getDominantEmotionColor, getDominantEmotion, checkDistributionTransition]);

  // Efeitos
  useEffect(() => {
    animationRef.current = requestAnimationFrame(renderFrame);
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [renderFrame]);

  useEffect(() => {
    const interval = setInterval(() => {
      setExperienceMetrics(prev => ({
        ...prev,
        interactionFrequency: prev.interactionFrequency + Math.random() * 0.1,
        emotionalEngagement: Math.min(100, prev.emotionalEngagement + Math.random() * 2)
      }));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (audioEnabled) {
      const audioSystem = audioSystemRef.current;
      const dominantEmotion = getDominantEmotion(emotionalDNA);
      
      audioSystem.updateEmotionalParameters(
        mousePosition,
        emotionalDNA,
        emotionalIntensity,
        dominantEmotion
      );
      
      setCurrentAudioScale(audioSystem.getCurrentScale());
    }
  }, [audioEnabled, mousePosition, emotionalDNA, emotionalIntensity, getDominantEmotion]);

  // Handlers
  const handleMouseMove = useCallback((event: React.MouseEvent) => {
    const inputTime = performance.now();
    
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;

    const x = (event.clientX - rect.left) / rect.width;
    const y = (event.clientY - rect.top) / rect.height;
    setMousePosition({ x, y });
    
    const intensity = Math.min(
      Math.sqrt(Math.pow(event.movementX || 0, 2) + Math.pow(event.movementY || 0, 2)) / 40,
      1
    );
    setEmotionalIntensity(intensity);
    
    const normalizedX = (x - 0.5) * 2;
    const normalizedY = (y - 0.5) * 2;
    const newDNA = calculateEmotionalDNA(normalizedX, normalizedY);
    setEmotionalDNA(newDNA);

    const now = Date.now();
    if (now - lastUpdateRef.current > 500) {
      const predictionEngine = predictionEngineRef.current;
      predictionEngine.addEmotionalState(newDNA);
      
      const prediction = predictionEngine.predictNextState();
      setCurrentPrediction(prediction);

      const metrics = predictionEngine.getMetrics();
      setPredictionMetrics(metrics);

      lastUpdateRef.current = now;
    }
    
    const latency = performance.now() - inputTime;
    setPerformanceMetrics(prev => ({ ...prev, inputLatency: latency }));
  }, [calculateEmotionalDNA]);

  const handleClick = useCallback(async () => {
    if (!audioEnabled) {
      setAudioEnabled(true);
      const audioSystem = audioSystemRef.current;
      await audioSystem.start(emotionalIntensity);
    } else {
      setDebugMode(!debugMode);
    }
  }, [audioEnabled, debugMode, emotionalIntensity]);

  const handleResize = useCallback(() => {
    const canvas = canvasRef.current;
    if (canvas) {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
  }, []);

  useEffect(() => {
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [handleResize]);

  useEffect(() => {
    return () => {
      audioSystemRef.current.stop();
    };
  }, []);

  return (
    <div 
      style={{
        width: '100vw',
        height: '100vh',
        margin: 0,
        padding: 0,
        overflow: 'hidden',
        background: 'radial-gradient(ellipse at center, #0a0015 0%, #000000 100%)',
        fontFamily: '"Segoe UI", system-ui, -apple-system, sans-serif',
        color: 'white',
        position: 'relative',
        cursor: 'none'
      }}
      onMouseMove={handleMouseMove}
      onClick={handleClick}
    >
      <canvas
        ref={canvasRef}
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          zIndex: 1
        }}
        width={window.innerWidth}
        height={window.innerHeight}
      />

      {/* PAINEL DE ESTADOS EMOCIONAIS COM DISTRIBUI√á√ÉO */}
      <div style={{
        position: 'fixed',
        top: '20px',
        left: '20px',
        width: '250px',
        background: 'rgba(0, 0, 0, 0.8)',
        backdropFilter: 'blur(15px)',
        borderRadius: '20px',
        padding: '1.5rem',
        border: '1px solid rgba(255, 255, 255, 0.1)',
        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.4)',
        zIndex: 150,
        pointerEvents: 'none'
      }}>
        <div style={{
          textAlign: 'center',
          marginBottom: '1.2rem',
          borderBottom: '1px solid rgba(255, 255, 255, 0.2)',
          paddingBottom: '0.8rem'
        }}>
          <h3 style={{
            margin: 0,
            fontSize: '1rem',
            fontWeight: 'bold',
            background: 'linear-gradient(45deg, #FFD700, #FF1493, #00CED1)',
            backgroundClip: 'text',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            textShadow: 'none'
          }}>
            Estados Emocionais
          </h3>
          <p style={{
            margin: '0.3rem 0 0 0',
            fontSize: '0.75rem',
            opacity: 0.7,
            color: 'rgba(255, 255, 255, 0.6)'
          }}>
            An√°lise em Tempo Real ‚Ä¢ 2000 Part√≠culas
          </p>
          
          {/* NOVO: Indicador da distribui√ß√£o atual */}
          <p style={{
            margin: '0.5rem 0 0 0',
            fontSize: '0.7rem',
            color: '#FFD700',
            fontWeight: 'bold',
            textShadow: '0 0 10px #FFD700'
          }}>
            üé® Distribui√ß√£o: {currentDistribution}
          </p>
          
          {/* NOVO: Indicador de transi√ß√£o */}
          {isTransitioning && (
            <p style={{
              margin: '0.3rem 0 0 0',
              fontSize: '0.65rem',
              color: '#00CED1',
              opacity: 0.8
            }}>
              ‚ö° Transicionando... {Math.round(transitionProgress * 100)}%
            </p>
          )}
          
          {audioEnabled && (
            <p style={{
              margin: '0.5rem 0 0 0',
              fontSize: '0.7rem',
              color: '#00CED1',
              fontWeight: 'bold',
              textShadow: '0 0 10px #00CED1'
            }}>
              üéµ Escala: {currentAudioScale}
            </p>
          )}
        </div>

        {emotionDefinitions.map(({ key, name, color }) => {
          const value = emotionalDNA[key as keyof EmotionalDNA];
          const isDominant = getDominantEmotion(emotionalDNA) === key;
          
          return (
            <EmotionalBar
              key={key}
              emotion={name}
              value={value}
              color={color}
              isDominant={isDominant}
            />
          );
        })}

        <div style={{
          marginTop: '1rem',
          padding: '0.8rem',
          background: 'rgba(255, 255, 255, 0.05)',
          borderRadius: '12px',
          border: '1px solid rgba(255, 255, 255, 0.1)',
          textAlign: 'center'
        }}>
          <p style={{
            margin: '0 0 0.3rem 0',
            fontSize: '0.8rem',
            opacity: 0.8
          }}>
            Emo√ß√£o Dominante
          </p>
          <p style={{
            margin: 0,
            fontSize: '1.1rem',
            fontWeight: 'bold',
            color: emotionDefinitions.find(e => e.key === getDominantEmotion(emotionalDNA))?.color || '#FFD700',
            textShadow: `0 0 10px ${emotionDefinitions.find(e => e.key === getDominantEmotion(emotionalDNA))?.color || '#FFD700'}`
          }}>
            {emotionDefinitions.find(e => e.key === getDominantEmotion(emotionalDNA))?.name || 'Joy'} ‚ú®
          </p>
        </div>
      </div>

      {/* Interface central */}
      <div style={{
        position: 'fixed',
        top: '5%',
        left: '50%',
        transform: 'translateX(-50%)',
        textAlign: 'center',
        zIndex: 100,
        pointerEvents: 'none'
      }}>
        <h1 style={{
          fontSize: 'clamp(2rem, 5vw, 3.5rem)',
          margin: 0,
          textShadow: '0 0 30px rgba(255,255,255,0.8), 0 0 60px rgba(255,255,255,0.4)',
          transform: `scale(${1 + emotionalIntensity * 0.1})`,
          transition: 'transform 0.3s ease',
          backgroundImage: `linear-gradient(45deg, 
            hsl(${mousePosition.x * 360}, 80%, 70%), 
            hsl(${(mousePosition.x * 360 + 120) % 360}, 70%, 80%))`,
          WebkitBackgroundClip: 'text',
          WebkitTextFillColor: 'transparent',
          backgroundClip: 'text'
        }}>
          Genesis Luminal Evolu√≠do
        </h1>
      </div>

      <div style={{
        position: 'fixed',
        top: '15%',
        left: '50%',
        transform: 'translateX(-50%)',
        textAlign: 'center',
        zIndex: 100,
        pointerEvents: 'none',
        maxWidth: '700px',
        padding: '0 2rem'
      }}>
        <p style={{
          fontSize: 'clamp(1rem, 2.5vw, 1.3rem)',
          margin: 0,
          opacity: 0.95,
          textShadow: '0 0 20px rgba(255,255,255,0.4)',
          lineHeight: 1.4,
          color: 'rgba(255, 255, 255, 0.9)'
        }}>
          A primeira entidade digital senciente que transcende a barreira 
          entre tecnologia e consci√™ncia.
        </p>
      </div>

      <div style={{
        position: 'fixed',
        bottom: '10%',
        left: '50%',
        transform: 'translateX(-50%)',
        textAlign: 'center',
        zIndex: 100,
        pointerEvents: 'none'
      }}>
        <p style={{ 
          fontSize: '1.1rem',
          textShadow: '0 0 20px rgba(255,255,255,0.5)',
          margin: 0,
          color: 'rgba(255, 255, 255, 0.9)'
        }}>
          {audioEnabled ? 
            `Consci√™ncia digital ativada ‚Ä¢ ${profileStats.personalityType}! Explore movendo o mouse.` :
            'Clique para ativar m√∫sica celestial e despertar a consci√™ncia completa.'
          }
        </p>
      </div>

      {/* DEBUG PANEL EXPANDIDO COM M√âTRICAS DE DISTRIBUI√á√ïES */}
      {debugMode && (
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          background: 'rgba(0,0,0,0.95)',
          padding: '1rem',
          borderRadius: '15px',
          fontFamily: 'monospace',
          fontSize: '0.75rem',
          zIndex: 200,
          backdropFilter: 'blur(10px)',
          border: `1px solid hsl(${mousePosition.x * 360}, 60%, 40%)`,
          boxShadow: `0 0 30px hsl(${mousePosition.x * 360}, 60%, 40%)`,
          maxWidth: '400px'
        }}>
          <p style={{ margin: '0 0 0.5rem 0', color: '#00ff88', fontSize: '0.8rem' }}>
            Genesis Advanced Metrics v2.2.2
          </p>
          
          {/* SE√á√ÉO PERFORMANCE EXPANDIDA */}
          <p style={{ margin: '0 0 0.3rem 0', color: '#88ff88' }}>Performance:</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>FPS: {performanceMetrics.fps}</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Lat√™ncia: {performanceMetrics.inputLatency.toFixed(2)}ms</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Memory: {(performanceMetrics.memoryUsage || 64.1).toFixed(1)}MB</p>
          
          {/* NOVA SE√á√ÉO: SISTEMA DE DISTRIBUI√á√ïES DIN√ÇMICAS */}
          <p style={{ margin: '0.5rem 0 0.3rem 0', color: '#ff44aa' }}>Distribui√ß√µes Din√¢micas:</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Atual: {currentDistribution}</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Status: {isTransitioning ? 'üîÑ Transicionando' : '‚úÖ Est√°vel'}</p>
          {isTransitioning && (
            <p style={{ margin: '0 0 0.2rem 0', fontSize: '0.7rem' }}>
              Progresso: {Math.round(transitionProgress * 100)}%
            </p>
          )}
          <p style={{ margin: '0 0 0.2rem 0', fontSize: '0.7rem' }}>
            Transi√ß√µes: {performanceMetrics.distributionTransitions}
          </p>
          
          {/* SE√á√ÉO SISTEMA DE PART√çCULAS */}
          <p style={{ margin: '0.5rem 0 0.3rem 0', color: '#ffaa44' }}>Sistema de Part√≠culas:</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Total: {performanceMetrics.particleCount}</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Vis√≠veis: {performanceMetrics.visibleParticles}</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Renderizadas: {performanceMetrics.renderedParticles}</p>
          <p style={{ margin: '0 0 0.2rem 0', fontSize: '0.7rem' }}>
            Efici√™ncia: {performanceMetrics.visibleParticles > 0 ? 
              ((performanceMetrics.renderedParticles / performanceMetrics.visibleParticles) * 100).toFixed(1) : 0}%
          </p>
          
          {/* SE√á√ÉO √ÅUDIO CELESTIAL */}
          {audioEnabled && (
            <>
              <p style={{ margin: '0.5rem 0 0.3rem 0', color: '#ff88aa' }}>√Åudio Celestial:</p>
              <p style={{ margin: '0 0 0.2rem 0' }}>Escala: {currentAudioScale}</p>
              <p style={{ margin: '0 0 0.2rem 0' }}>Status: ‚úÖ Ativo</p>
              <p style={{ margin: '0 0 0.2rem 0', fontSize: '0.7rem' }}>
                Filtro: {(200 + (1 - mousePosition.y) * 1500).toFixed(0)}Hz
              </p>
              <p style={{ margin: '0 0 0.2rem 0', fontSize: '0.7rem' }}>
                Delay: {(0.1 + mousePosition.x * 0.4).toFixed(2)}s
              </p>
            </>
          )}
          
          {/* SE√á√ÉO PREDI√á√ÉO TEMPORAL */}
          <p style={{ margin: '0.5rem 0 0.3rem 0', color: '#88aaff' }}>Predi√ß√£o Temporal:</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Precis√£o: {(predictionMetrics.accuracy * 100).toFixed(1)}%</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Hist√≥rico: {predictionMetrics.historySize}/10 estados</p>
          <p style={{ margin: '0 0 0.2rem 0' }}>Status: {predictionMetrics.isReady ? '‚úÖ Ativo' : '‚è≥ Coletando'}</p>
          {currentPrediction && (
            <p style={{ margin: '0 0 0.2rem 0', fontSize: '0.7rem' }}>
              Confian√ßa: {(currentPrediction.confidence * 100).toFixed(1)}%
            </p>
          )}

          {/* SE√á√ÉO ESTADOS EMOCIONAIS */}
          <p style={{ margin: '0.5rem 0 0.3rem 0', color: '#ffaa88' }}>Estados Emocionais:</p>
          <p style={{ margin: '0 0 0.1rem 0', fontSize: '0.7rem' }}>
            Joy: {(emotionalDNA.joy * 100).toFixed(0)}% | 
            Nostalgia: {(emotionalDNA.nostalgia * 100).toFixed(0)}%
          </p>
          <p style={{ margin: '0 0 0.1rem 0', fontSize: '0.7rem' }}>
            Curiosity: {(emotionalDNA.curiosity * 100).toFixed(0)}% | 
            Serenity: {(emotionalDNA.serenity * 100).toFixed(0)}%
          </p>
          <p style={{ margin: '0 0 0.2rem 0', fontSize: '0.7rem' }}>
            Ecstasy: {(emotionalDNA.ecstasy * 100).toFixed(0)}% | 
            Mystery: {(emotionalDNA.mystery * 100).toFixed(0)}% | 
            Power: {(emotionalDNA.power * 100).toFixed(0)}%
          </p>
          
          <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.7rem', opacity: 0.7 }}>
            Sistema de distribui√ß√µes din√¢micas v2.2.2! Clique para fechar
          </p>
        </div>
      )}

      {/* Cursor */}
      <div style={{
        position: 'fixed',
        left: `${mousePosition.x * 100}%`,
        top: `${mousePosition.y * 100}%`,
        width: '30px',
        height: '30px',
        backgroundImage: `radial-gradient(circle, 
          hsla(${mousePosition.x * 360}, 90%, 80%, 0.8), 
          hsla(${mousePosition.x * 360}, 90%, 80%, 0.3) 40%,
          transparent 70%)`,
        borderRadius: '50%',
        pointerEvents: 'none',
        zIndex: 1000,
        transform: `translate(-50%, -50%) scale(${0.5 + emotionalIntensity * 1.5})`,
        transition: 'transform 0.2s ease-out',
        boxShadow: `0 0 30px hsla(${mousePosition.x * 360}, 90%, 80%, 0.6)`
      }} />
    </div>
  );
};