/**
 * üöÄ GENESIS CORE - INTEGRADO COM BACKEND CLAUDE
 * 
 * Componente principal que usa IA real via backend
 * Status: BACKEND INTEGRATION (IA Claude Real)
 */

import React, { useRef, useEffect, useState, useCallback } from 'react';
import { backendClient } from '../../services/BackendClient';
import { EmotionalDNA } from '../../core/entities/EmotionalDNA';

export const GenesisCore: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number>();
  
  // Estados para integra√ß√£o backend
  const [currentEmotional, setCurrentEmotional] = useState<EmotionalDNA>(
    new EmotionalDNA(0.5, 0.3, 0.7, 0.4, 0.2, 0.6, 0.5)
  );
  const [mousePosition, setMousePosition] = useState({ x: 0.5, y: 0.5 });
  const [sessionStart] = useState(Date.now());
  const [backendStatus, setBackendStatus] = useState<'connecting' | 'connected' | 'offline'>('connecting');
  const [lastAnalysis, setLastAnalysis] = useState<any>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // Part√≠culas para renderiza√ß√£o
  const particlesRef = useRef<Array<{
    x: number; y: number; vx: number; vy: number;
    size: number; opacity: number; hue: number;
  }>>([]);

  // Inicializa√ß√£o
  useEffect(() => {
    console.log('üöÄ Genesis Luminal - BACKEND INTEGRATION');
    console.log('üß† Sistema: IA Claude Real via Backend');
    console.log('üì° Conectando ao backend...');
    
    // Verificar status do backend
    checkBackendStatus();
    
    // Inicializar part√≠culas
    initializeParticles();
    
    // Iniciar anima√ß√£o
    const animate = () => {
      render();
      animationRef.current = requestAnimationFrame(animate);
    };
    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  // Verificar status do backend
  const checkBackendStatus = async () => {
    try {
      const isHealthy = await backendClient.healthCheck();
      if (isHealthy) {
        setBackendStatus('connected');
        console.log('‚úÖ Backend conectado - Claude API dispon√≠vel');
      } else {
        setBackendStatus('offline');
        console.log('‚ö†Ô∏è Backend offline - modo fallback ativo');
      }
    } catch (error) {
      setBackendStatus('offline');
      console.log('‚ùå Erro ao conectar backend:', error);
    }
  };

  // Inicializar part√≠culas
  const initializeParticles = () => {
    const particles = [];
    for (let i = 0; i < 2000; i++) {
      particles.push({
        x: Math.random() * window.innerWidth,
        y: Math.random() * window.innerHeight,
        vx: (Math.random() - 0.5) * 2,
        vy: (Math.random() - 0.5) * 2,
        size: Math.random() * 3 + 1,
        opacity: Math.random() * 0.8 + 0.2,
        hue: Math.random() * 360
      });
    }
    particlesRef.current = particles;
  };

  // Mouse handler com an√°lise Claude real
  const handleMouseMove = useCallback(async (event: React.MouseEvent) => {
    const rect = event.currentTarget.getBoundingClientRect();
    const x = (event.clientX - rect.left) / rect.width;
    const y = (event.clientY - rect.top) / rect.height;
    
    setMousePosition({ x, y });

    // An√°lise emocional via backend (throttled)
    if (backendStatus === 'connected' && !isAnalyzing) {
      setIsAnalyzing(true);
      
      try {
        console.log('üß† Enviando an√°lise para Claude via backend...');
        
        const response = await backendClient.analyzeEmotionalState({
          currentState: currentEmotional,
          mousePosition: { x, y },
          sessionDuration: Date.now() - sessionStart
        });

        if (response?.success && response.analysis) {
          console.log('‚úÖ An√°lise Claude recebida via backend!');
          console.log('üìä Confian√ßa:', response.analysis.confidence);
          console.log('üé® Recomenda√ß√£o:', response.analysis.recommendations.visualStyle);
          
          setLastAnalysis(response.analysis);
          
          // Atualizar estado emocional baseado na an√°lise Claude
          const predicted = response.analysis.predictedNextState;
          setCurrentEmotional(new EmotionalDNA(
            predicted.joy,
            predicted.nostalgia,
            predicted.curiosity,
            predicted.serenity,
            predicted.ecstasy,
            predicted.mystery,
            predicted.power
          ));
        } else if (response?.fallback) {
          console.log('‚ö†Ô∏è Backend retornou fallback - usando predi√ß√£o local');
          // Usar predi√ß√£o local simples
          updateEmotionalStateLocal(x, y);
        }
      } catch (error) {
        console.log('‚ùå Erro na an√°lise Claude, usando fallback local');
        updateEmotionalStateLocal(x, y);
      } finally {
        // Reset throttling ap√≥s 3 segundos
        setTimeout(() => setIsAnalyzing(false), 3000);
      }
    } else if (backendStatus === 'offline') {
      // Modo offline: predi√ß√£o local
      updateEmotionalStateLocal(x, y);
    }
  }, [currentEmotional, backendStatus, isAnalyzing, sessionStart]);

  // Predi√ß√£o emocional local (fallback)
  const updateEmotionalStateLocal = (x: number, y: number) => {
    const influence = 0.1;
    setCurrentEmotional(prev => new EmotionalDNA(
      Math.max(0, Math.min(1, prev.joy + (x - 0.5) * influence)),
      Math.max(0, Math.min(1, prev.nostalgia + Math.sin(Date.now() * 0.001) * 0.05)),
      Math.max(0, Math.min(1, prev.curiosity + (y - 0.5) * influence)),
      Math.max(0, Math.min(1, prev.serenity + (1 - Math.abs(x - 0.5)) * influence)),
      Math.max(0, Math.min(1, prev.ecstasy + (x * y) * influence)),
      Math.max(0, Math.min(1, prev.mystery + (1 - y) * influence)),
      Math.max(0, Math.min(1, prev.power + Math.abs(x - 0.5) * influence))
    ));
  };

  // Fun√ß√£o de renderiza√ß√£o
  const render = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Ajustar tamanho do canvas
    if (canvas.width !== window.innerWidth || canvas.height !== window.innerHeight) {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    // Limpar canvas
    ctx.fillStyle = 'rgba(26, 26, 46, 0.1)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Renderizar part√≠culas
    const particles = particlesRef.current;
    const mouseX = mousePosition.x * canvas.width;
    const mouseY = mousePosition.y * canvas.height;

    // Intensidade baseada em recomenda√ß√µes Claude ou valor padr√£o
    const intensity = lastAnalysis?.recommendations?.intensity || 0.7;

    particles.forEach(particle => {
      // Atra√ß√£o para o mouse
      const dx = mouseX - particle.x;
      const dy = mouseY - particle.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      if (distance < 200) {
        const force = (200 - distance) / 200;
        particle.vx += dx * force * 0.001;
        particle.vy += dy * force * 0.001;
      }

      // Atualizar posi√ß√£o
      particle.x += particle.vx;
      particle.y += particle.vy;

      // Fric√ß√£o
      particle.vx *= 0.99;
      particle.vy *= 0.99;

      // Bordas
      if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -0.5;
      if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -0.5;
      
      particle.x = Math.max(0, Math.min(canvas.width, particle.x));
      particle.y = Math.max(0, Math.min(canvas.height, particle.y));

      // Cor baseada em emo√ß√£o (influenciada por Claude)
      const hue = (particle.hue + currentEmotional.joy * 60 + currentEmotional.curiosity * 180) % 360;
      const saturation = 50 + currentEmotional.ecstasy * 40;
      const lightness = 40 + currentEmotional.serenity * 30;

      // Renderizar part√≠cula com intensidade Claude
      ctx.beginPath();
      ctx.arc(particle.x, particle.y, particle.size * intensity, 0, Math.PI * 2);
      ctx.fillStyle = `hsla(${hue}, ${saturation}%, ${lightness}%, ${particle.opacity})`;
      ctx.fill();
    });

    // Onda no mouse
    ctx.beginPath();
    ctx.arc(mouseX, mouseY, 50 + Math.sin(Date.now() * 0.01) * 20, 0, Math.PI * 2);
    ctx.strokeStyle = `hsla(${currentEmotional.joy * 360}, 70%, 60%, 0.5)`;
    ctx.lineWidth = 2;
    ctx.stroke();
  };

  // Status indicator colors
  const getStatusColor = () => {
    switch (backendStatus) {
      case 'connected': return '#00ff00';
      case 'connecting': return '#ffff00';
      case 'offline': return '#ff6600';
      default: return '#ffffff';
    }
  };

  const getStatusText = () => {
    switch (backendStatus) {
      case 'connected': return 'Claude IA Real Conectada';
      case 'connecting': return 'Conectando...';
      case 'offline': return 'Modo Local (Backend Offline)';
      default: return 'Status Desconhecido';
    }
  };

  return (
    <div style={{
      width: '100vw',
      height: '100vh',
      position: 'relative',
      overflow: 'hidden',
      background: 'linear-gradient(135deg, #1a1a2e, #16213e, #0f3460)',
      cursor: 'none'
    }}>
      <canvas
        ref={canvasRef}
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%'
        }}
        onMouseMove={handleMouseMove}
      />

      {/* Status Panel */}
      <div style={{
        position: 'fixed',
        top: '10px',
        right: '10px',
        background: 'rgba(0,0,0,0.8)',
        color: 'white',
        padding: '15px',
        borderRadius: '8px',
        fontSize: '12px',
        fontFamily: 'monospace',
        minWidth: '250px'
      }}>
        <div style={{ color: getStatusColor(), fontWeight: 'bold' }}>
          üß† {getStatusText()}
        </div>
        <div>üñ±Ô∏è Mouse: {mousePosition.x.toFixed(2)}, {mousePosition.y.toFixed(2)}</div>
        <div>üòä Joy: {currentEmotional.joy.toFixed(2)}</div>
        <div>üîÆ Mystery: {currentEmotional.mystery.toFixed(2)}</div>
        {lastAnalysis && (
          <>
            <div>üéØ Confian√ßa: {lastAnalysis.confidence?.toFixed(2) || 'N/A'}</div>
            <div>üé® Estilo: {lastAnalysis.recommendations?.visualStyle || 'N/A'}</div>
            <div>üéµ √Åudio: {lastAnalysis.recommendations?.audioScale || 'N/A'}</div>
          </>
        )}
        <div style={{ marginTop: '8px', fontSize: '10px', opacity: 0.7 }}>
          {isAnalyzing ? 'üîÑ Analisando...' : '‚è≥ Aguardando movimento'}
        </div>
      </div>
    </div>
  );
};

export default GenesisCore;
